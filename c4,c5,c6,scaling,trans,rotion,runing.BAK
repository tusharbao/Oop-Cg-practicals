#include<iostream.h>
#include<graphics.h>
#include<conio.h>
#include<math.h>
//using namespace std;
int main()
{
    int gd=DETECT,gm,s;
    initgraph(&gd,&gm,(char*)"c:\\turboc3\\bgi\\");
    cout<<"1.Translation\n2.Rotation\n3.Scaling\n4.Reflection\n5.Shearing   "<<endl;
    cout<<"Selection:";
    cin>>s;
    switch(s)
	{
	case 1:
	    {   int x1=200,y1=150,x2=300,y2=250;
		int tx=50,ty=50;
		cout<<"Rectangle before translation"<<endl;
		setcolor(3);
		rectangle(x1,y1,x2,y2);
		setcolor(4);
		cout<<"Rectangle after translation"<<endl;
		rectangle(x1+tx,y1+ty,x2+tx,y2+ty);
		getch();
                break;
            }
        case 2:
            {  long x1=200,y1=200,x2=300,y2=300;
                double a;
                cout<<"Rectangle with rotation"<<endl;
                setcolor(3);
                rectangle(x1,y1,x2,y2);
                cout<<"Angle of rotation:";
                cin>>a;
                a=(a*3.14)/180;
                long xr=x1+((x2-x1)*cos(a)-(y2-y1)*sin(a));
                long yr=y1+((x2-x1)*sin(a)+(y2-y1)*cos(a));
                setcolor(2);
                rectangle(x1,y1,xr,yr);
                getch();
                break;}
        case 3:
            {
                int x1=30,y1=30,x2=70,y2=70,y=2,x=2;
                cout<<"Before scaling"<<endl;
                setcolor(3);
                rectangle(x1,y1,x2,y2);
                cout<<"After scaling"<<endl;
                setcolor(10);
                rectangle(x1*x,y1*y,x2*x,y2*y);
                getch();
                break;}
        case 4:
            {
                 int x1=200,y1=300,x2=500,y2=300,x3=350,y3=400;
                 cout<<"triangle before reflection"<<endl;
                 setcolor(3);
                 line(x1,y1,x2,y2);
                 line(x1,y1,x3,y3);
                 line(x2,y2,x3,y3);cout<<"triangle after reflection"<<endl;
                 setcolor(5);
                 line(x1,-y1+500,x2,-y2+500);
                 line(x1,-y1+500,x3,-y3+500);
                 line(x2,-y2+500,x3,-y3+500);
                 getch();
                 break;}
        case 5:
        {
  int x1=400,y1=100,x2=600,y2=100,x3=400,y3=200,x4=600,y4=200,shx=2;
             cout<<"Before shearing of rectangle"<<endl;
             setcolor(3);
             line(x1,y1,x2,y2);
             line(x1,y1,x3,y3);
             line(x3,y3,x4,y4);
             line(x2,y2,x4,y4);
             cout<<"After shearing of rectangle"<<endl;
             x1=x1+shx*y1;
             x2=x2+shx*y2;
             x3=x3+shx*y3;
             x4=x4+shx*y4;
             setcolor(13);
             line(x1,y1,x2,y2);
             line(x1,y1,x3,y3);
             line(x3,y3,x4,y4);
             line(x2,y2,x4,y4);getch();}default:
          {
            cout<<"Invalid Selection"<<endl;
            break;
          }
        }closegraph();
    return 0;
}








//### Algorithm for Geometric Transformations Program

1. **Start**  
   - Initialize the graphics mode using `initgraph()`.

2. **Display Options**  
   - Show a menu with the following choices:
     1. Translation  
     2. Rotation  
     3. Scaling  
     4. Reflection  
     5. Shearing  

3. **Take User Input**  
   - Ask the user to select a transformation option.

4. **Perform Selected Transformation**  
   - Use `switch-case` to handle each transformation:
     - **Case 1 (Translation)**:  
       - Draw a rectangle.  
       - Move (translate) it by adding a fixed value (`tx`, `ty`) to its coordinates.  
       - Draw the translated rectangle.

     - **Case 2 (Rotation)**:  
       - Draw a rectangle.  
       - Rotate it by a specified angle using rotation formulas:
         - \( x' = x \cos(a) - y \sin(a) \)  
         - \( y' = x \sin(a) + y \cos(a) \)  
       - Draw the rotated rectangle.

     - **Case 3 (Scaling)**:  
       - Draw a rectangle.  
       - Scale it by multiplying its coordinates by scaling factors (`sx`, `sy`).  
       - Draw the scaled rectangle.

     - **Case 4 (Reflection)**:  
       - Draw a triangle.  
       - Reflect it across the x-axis by changing the y-coordinates to `-y`.  
       - Draw the reflected triangle.

     - **Case 5 (Shearing)**:  
       - Draw a rectangle.  
       - Apply shearing by changing the x-coordinates using the formula:  
         - \( x' = x + shx \cdot y \)  
       - Draw the sheared rectangle.

5. **Invalid Option**  
   - If the user enters an invalid option, display an error message.

6. **End Graphics Mode**  
   - Close the graphics mode using `closegraph()`.

7. **End Program**  
   - Exit the program.

This algorithm summarizes the flow of the program and simplifies its logic for understanding.

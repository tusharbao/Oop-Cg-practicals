//C5,2D Translation
#include<conio.h>
#include <graphics.h>
#include <iostream.h>
//using namespacestd;

class triangle {
    int x1, x2, x3, y1, y2, y3, nx1, nx2, nx3, ny1, ny2, ny3, c;

public:
    void read();
    void draw();
    triangle operator+(triangle t);
};

void triangle::read() {
    cout << "\t Program for Translation\n";
    cout << "\n\t Enter the coordinates of triangle\n";
    setcolor(11);
    cin >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;
}

void triangle::draw() {
    line(x1, y1, x2, y2);
    line(x2, y2, x3, y3);
    line(x3, y3, x1, y1);
}

triangle triangle::operator+(triangle t) {
    int tx, ty;
    cout << "\nEnter translation factors (tx and ty): ";
    cin >> tx >> ty;

    t.x1 = x1 + tx;
    t.y1 = y1 + ty;
    t.x2 = x2 + tx;
    t.y2 = y2 + ty;
    t.x3 = x3 + tx;
    t.y3 = y3 + ty;

    return t;
}

int main() {
    int gm, gd = DETECT;
    initgraph(&gd, &gm, NULL);

    triangle t1, T;
    t1.read();
    t1.draw();

    T = t1 + T; // Translation
    T.draw();

    getch();
    closegraph();
    return 0;
}


### Short Algorithm for 2D Translation Program

1. **Start the program.**  
2. **Initialize graphics mode.**  
3. **Input the coordinates of the triangle vertices.**  
4. **Draw the original triangle.**  
5. **Input translation factors \(T_x\) and \(T_y\).**  
6. **Add translation factors to each vertex coordinate:**  
   - \(x' = x + T_x\)  
   - \(y' = y + T_y\)  
7. **Draw the translated triangle.**  
8. **Close graphics and exit.**
